--- /dev/fd/63	2018-10-04 08:21:15.000000000 +0900
+++ /dev/fd/62	2018-10-04 08:21:15.000000000 +0900
@@ -64,35 +64,6 @@
 
 
 ---
-name: estimatefee
-btcversion: 0.17.0
-btcgroup: util
-permalink: en/doc/0.17.0/rpc/util/estimatefee/
----
-
-estimatefee nblocks
-
-DEPRECATED. Please use estimatesmartfee for more intelligent estimates.
-Estimates the approximate fee per kilobyte needed for a transaction to begin
-confirmation within nblocks blocks. Uses virtual transaction size of transaction
-as defined in BIP 141 (witness data is discounted).
-
-Arguments:
-1. nblocks     (numeric, required)
-
-Result:
-n              (numeric) estimated fee-per-kilobyte
-
-A negative value is returned if not enough transactions and blocks
-have been observed to make an estimate.
--1 is always returned for nblocks == 1 as it is impossible to calculate
-a fee that is high enough to get reliably included in the next block.
-
-Example:
-> bitcoin-cli estimatefee 6
-
-
----
 name: signmessagewithprivkey
 btcversion: 0.17.0
 btcgroup: util
@@ -208,41 +179,23 @@
 validateaddress "address"
 
 Return information about the given bitcoin address.
+DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must
+transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated
+fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,
+script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.
 
 Arguments:
-1. "address"     (string, required) The bitcoin address to validate
+1. "address"                    (string, required) The bitcoin address to validate
 
 Result:
 {
   "isvalid" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.
   "address" : "address",        (string) The bitcoin address validated
   "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address
-  "ismine" : true|false,        (boolean) If the address is yours or not
-  "iswatchonly" : true|false,   (boolean) If the address is watchonly
-  "isscript" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.
-  "iswitness" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version
-  "witness_version" : version   (number, optional) For all witness output types, gives the version number.
-  "witness_program" : "hex"     (string, optional) For all witness output types, gives the script or key hash present in the address.
-  "script" : "type"             (string, optional) The output script type. Only if "isscript" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown
-  "hex" : "hex",                (string, optional) The redeemscript for the P2SH or P2WSH address
-  "addresses"                   (string, optional) Array of addresses associated with the known redeemscript (only if "iswitness" is false). This field is superseded by the "pubkeys" field and the address inside "embedded".
-    [
-      "address"
-      ,...
-    ]
-  "pubkeys"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if "script" is "multisig")
-    [
-      "pubkey"
-      ,...
-    ]
-  "sigsrequired" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if "script" is "multisig")
-  "pubkey" : "publickeyhex",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)
-  "embedded" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding "isvalid", metadata ("timestamp", "hdkeypath", "hdmasterkeyid") and relation to the wallet ("ismine", "iswatchonly", "account").
-  "iscompressed" : true|false,  (boolean) If the address is compressed
-  "account" : "account"         (string) DEPRECATED. The account associated with the address, "" is the default account
-  "timestamp" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)
-  "hdkeypath" : "keypath"       (string, optional) The HD keypath if the key is HD and available
-  "hdmasterkeyid" : "<hash160>" (string, optional) The Hash160 of the HD master pubkey
+  "isscript" : true|false,      (boolean) If the key is a script
+  "iswitness" : true|false,     (boolean) If the address is a witness address
+  "witness_version" : version   (numeric, optional) The version number of the witness program
+  "witness_program" : "hex"     (string, optional) The hex value of the witness program
 }
 
 Examples:
@@ -257,21 +210,19 @@
 permalink: en/doc/0.17.0/rpc/util/createmultisig/
 ---
 
-createmultisig nrequired ["key",...]
+createmultisig nrequired ["key",...] ( "address_type" )
 
 Creates a multi-signature address with n signature of m keys required.
 It returns a json object with the address and redeemScript.
-DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must
-transition to using addmultisigaddress to create multisig addresses with addresses known
-to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig
 
 Arguments:
-1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.
+1. nrequired                    (numeric, required) The number of required signatures out of the n keys.
 2. "keys"                       (string, required) A json array of hex-encoded public keys
      [
        "key"                    (string) The hex-encoded public key
        ,...
      ]
+3. "address_type"               (string, optional) The address type to use. Options are "legacy", "p2sh-segwit", and "bech32". Default is legacy.
 
 Result:
 {
@@ -639,7 +590,6 @@
   "pooledtx": n              (numeric) The size of the mempool
   "chain": "xxxx",           (string) current network name as defined in BIP70 (main, test, regtest)
   "warnings": "..."          (string) any network and blockchain warnings
-  "errors": "..."            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo
 }
 
 Examples:
@@ -724,7 +674,6 @@
          "fee": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one
          "sigops" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero
          "weight" : n,                (numeric) total transaction weight, as counted for purposes of block limits
-         "required" : true|false      (boolean) if provided and true, this transaction must be in the final block
       }
       ,...
   ],
@@ -768,6 +717,7 @@
 2. dummy          (numeric, optional) API-Compatibility for previous API. Must be zero or null.
                   DEPRECATED. For forward compatibility use named arguments and omit this parameter.
 3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).
+                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.
                   The fee is not actually paid, only the algorithm for selecting transactions into a block
                   considers the transaction as it would have paid a higher (or lower) fee.
 
@@ -805,6 +755,230 @@
 
 
 ---
+name: finalizepsbt
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/finalizepsbt/
+---
+
+finalizepsbt "psbt" ( extract )
+Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a
+network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be
+created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.
+Implements the Finalizer and Extractor roles.
+
+Arguments:
+1. "psbt"                 (string) A base64 string of a PSBT
+2. "extract"              (boolean, optional, default=true) If true and the transaction is complete, 
+                             extract and return the complete transaction in normal network serialization instead of the PSBT.
+
+Result:
+{
+  "psbt" : "value",          (string) The base64-encoded partially signed transaction if not extracted
+  "hex" : "value",           (string) The hex-encoded network transaction if extracted
+  "complete" : true|false,   (boolean) If the transaction has a complete set of signatures
+  ]
+}
+
+Examples:
+> bitcoin-cli finalizepsbt "psbt"
+
+
+---
+name: signrawtransactionwithkey
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/signrawtransactionwithkey/
+---
+
+signrawtransactionwithkey "hexstring" ["privatekey1",...] ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )
+
+Sign inputs for raw transaction (serialized, hex-encoded).
+The second argument is an array of base58-encoded private
+keys that will be the only keys used to sign the transaction.
+The third optional argument (may be null) is an array of previous transaction outputs that
+this transaction depends on but may not yet be in the block chain.
+
+Arguments:
+1. "hexstring"                      (string, required) The transaction hex string
+2. "privkeys"                       (string, required) A json array of base58-encoded private keys for signing
+    [                               (json array of strings)
+      "privatekey"                  (string) private key in base58-encoding
+      ,...
+    ]
+3. "prevtxs"                        (string, optional) An json array of previous dependent transaction outputs
+     [                              (json array of json objects, or 'null' if none provided)
+       {
+         "txid":"id",               (string, required) The transaction id
+         "vout":n,                  (numeric, required) The output number
+         "scriptPubKey": "hex",     (string, required) script key
+         "redeemScript": "hex",     (string, required for P2SH or P2WSH) redeem script
+         "amount": value            (numeric, required) The amount spent
+       }
+       ,...
+    ]
+4. "sighashtype"                    (string, optional, default=ALL) The signature hash type. Must be one of
+       "ALL"
+       "NONE"
+       "SINGLE"
+       "ALL|ANYONECANPAY"
+       "NONE|ANYONECANPAY"
+       "SINGLE|ANYONECANPAY"
+
+Result:
+{
+  "hex" : "value",                  (string) The hex-encoded raw transaction with signature(s)
+  "complete" : true|false,          (boolean) If the transaction has a complete set of signatures
+  "errors" : [                      (json array of objects) Script verification errors (if there are any)
+    {
+      "txid" : "hash",              (string) The hash of the referenced, previous transaction
+      "vout" : n,                   (numeric) The index of the output to spent and used as input
+      "scriptSig" : "hex",          (string) The hex-encoded signature script
+      "sequence" : n,               (numeric) Script sequence number
+      "error" : "text"              (string) Verification or signing error related to the input
+    }
+    ,...
+  ]
+}
+
+Examples:
+> bitcoin-cli signrawtransactionwithkey "myhex"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransactionwithkey", "params": ["myhex"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: combinepsbt
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/combinepsbt/
+---
+
+combinepsbt ["psbt",...]
+
+Combine multiple partially signed Bitcoin transactions into one transaction.
+Implements the Combiner role.
+
+Arguments:
+1. "txs"                   (string) A json array of base64 strings of partially signed transactions
+    [
+      "psbt"             (string) A base64 string of a PSBT
+      ,...
+    ]
+
+Result:
+  "psbt"          (string) The base64-encoded partially signed transaction
+
+Examples:
+> bitcoin-cli combinepsbt ["mybase64_1", "mybase64_2", "mybase64_3"]
+
+
+---
+name: decodepsbt
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/decodepsbt/
+---
+
+decodepsbt "psbt"
+
+Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.
+
+Arguments:
+1. "psbt"            (string, required) The PSBT base64 string
+
+Result:
+{
+  "tx" : {                   (json object) The decoded network-serialized unsigned transaction.
+    ...                                      The layout is the same as the output of decoderawtransaction.
+  },
+  "unknown" : {                (json object) The unknown global fields
+    "key" : "value"            (key-value pair) An unknown key-value pair
+     ...
+  },
+  "inputs" : [                 (array of json objects)
+    {
+      "non_witness_utxo" : {   (json object, optional) Decoded network transaction for non-witness UTXOs
+        ...
+      },
+      "witness_utxo" : {            (json object, optional) Transaction output for witness UTXOs
+        "amount" : x.xxx,           (numeric) The value in BTC
+        "scriptPubKey" : {          (json object)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+          "type" : "pubkeyhash",    (string) The type, eg 'pubkeyhash'
+          "address" : "address"     (string) Bitcoin address if there is one
+        }
+      },
+      "partial_signatures" : {             (json object, optional)
+        "pubkey" : "signature",           (string) The public key and signature that corresponds to it.
+        ,...
+      }
+      "sighash" : "type",                  (string, optional) The sighash type to be used
+      "redeem_script" : {       (json object, optional)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+          "type" : "pubkeyhash",    (string) The type, eg 'pubkeyhash'
+        }
+      "witness_script" : {       (json object, optional)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+          "type" : "pubkeyhash",    (string) The type, eg 'pubkeyhash'
+        }
+      "bip32_derivs" : {          (json object, optional)
+        "pubkey" : {                     (json object, optional) The public key with the derivation path as the value.
+          "master_fingerprint" : "fingerprint"     (string) The fingerprint of the master key
+          "path" : "path",                         (string) The path
+        }
+        ,...
+      }
+      "final_scriptsig" : {       (json object, optional)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+        }
+       "final_scriptwitness": ["hex", ...] (array of string) hex-encoded witness data (if any)
+      "unknown" : {                (json object) The unknown global fields
+        "key" : "value"            (key-value pair) An unknown key-value pair
+         ...
+      },
+    }
+    ,...
+  ]
+  "outputs" : [                 (array of json objects)
+    {
+      "redeem_script" : {       (json object, optional)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+          "type" : "pubkeyhash",    (string) The type, eg 'pubkeyhash'
+        }
+      "witness_script" : {       (json object, optional)
+          "asm" : "asm",            (string) The asm
+          "hex" : "hex",            (string) The hex
+          "type" : "pubkeyhash",    (string) The type, eg 'pubkeyhash'
+      }
+      "bip32_derivs" : [          (array of json objects, optional)
+        {
+          "pubkey" : "pubkey",                     (string) The public key this path corresponds to
+          "master_fingerprint" : "fingerprint"     (string) The fingerprint of the master key
+          "path" : "path",                         (string) The path
+          }
+        }
+        ,...
+      ],
+      "unknown" : {                (json object) The unknown global fields
+        "key" : "value"            (key-value pair) An unknown key-value pair
+         ...
+      },
+    }
+    ,...
+  ]
+  "fee" : fee                      (numeric, optional) The transaction fee paid if all UTXOs slots in the PSBT have been filled.
+}
+
+Examples:
+> bitcoin-cli decodepsbt "psbt"
+
+
+---
 name: fundrawtransaction
 btcversion: 0.17.0
 btcgroup: rawtransactions
@@ -883,7 +1057,7 @@
 
 signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
 
-Sign inputs for raw transaction (serialized, hex-encoded).
+DEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).
 The second optional argument (may be null) is an array of previous transaction outputs that
 this transaction depends on but may not yet be in the block chain.
 The third optional argument (may be null) is an array of base58-encoded private
@@ -991,6 +1165,7 @@
   "hash" : "id",        (string) The transaction hash (differs from txid for witness transactions)
   "size" : n,             (numeric) The transaction size
   "vsize" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)
+  "weight" : n,           (numeric) The transaction's weight (between vsize*4 - 3 and vsize*4)
   "version" : n,          (numeric) The version
   "locktime" : ttt,       (numeric) The lock time
   "vin" : [               (array of json objects)
@@ -1057,6 +1232,39 @@
 
 
 ---
+name: converttopsbt
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/converttopsbt/
+---
+
+converttopsbt "hexstring" ( permitsigdata iswitness )
+
+Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction
+createpsbt and walletcreatefundedpsbt should be used for new applications.
+
+Arguments:
+1. "hexstring"              (string, required) The hex string of a raw transaction
+2. permitsigdata           (boolean, optional, default=false) If true, any signatures in the input will be discarded and conversion.
+                              will continue. If false, RPC will fail if any signatures are present.
+3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction.
+                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion
+                              will be tried. If false, only non-witness deserialization wil be tried. Only has an effect if
+                              permitsigdata is true.
+
+Result:
+  "psbt"        (string)  The resulting raw transaction (base64-encoded string)
+
+Examples:
+
+Create a transaction
+> bitcoin-cli createrawtransaction "[{\"txid\":\"myid\",\"vout\":0}]" "[{\"data\":\"00010203\"}]"
+
+Convert the transaction to a PSBT
+> bitcoin-cli converttopsbt "rawtransaction"
+
+
+---
 name: sendrawtransaction
 btcversion: 0.17.0
 btcgroup: rawtransactions
@@ -1127,6 +1335,7 @@
   "hash" : "id",        (string) The transaction hash (differs from txid for witness transactions)
   "size" : n,             (numeric) The serialized transaction size
   "vsize" : n,            (numeric) The virtual transaction size (differs from size for witness transactions)
+  "weight" : n,           (numeric) The transaction's weight (between vsize*4-3 and vsize*4)
   "version" : n,          (numeric) The version
   "locktime" : ttt,       (numeric) The lock time
   "vin" : [               (array of json objects)
@@ -1180,7 +1389,7 @@
 permalink: en/doc/0.17.0/rpc/rawtransactions/createrawtransaction/
 ---
 
-createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,"data":"hex",...} ( locktime ) ( replaceable )
+createrawtransaction [{"txid":"id","vout":n},...] [{"address":amount},{"data":"hex"},...] ( locktime ) ( replaceable )
 
 Create a transaction spending the given inputs and creating new outputs.
 Outputs can be addresses or data.
@@ -1192,18 +1401,23 @@
 1. "inputs"                (array, required) A json array of json objects
      [
        {
-         "txid":"id",    (string, required) The transaction id
+         "txid":"id",      (string, required) The transaction id
          "vout":n,         (numeric, required) The output number
          "sequence":n      (numeric, optional) The sequence number
        } 
        ,...
      ]
-2. "outputs"               (object, required) a json object with outputs
+2. "outputs"               (array, required) a json array with outputs (key-value pairs)
+   [
     {
-      "address": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the BTC amount
-      "data": "hex"      (string, required) The key is "data", the value is hex encoded data
-      ,...
+      "address": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC
+    },
+    {
+      "data": "hex"        (obj, optional) A key-value pair. The key must be "data", the value is hex encoded data
     }
+    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also
+                             accepted as second parameter.
+   ]
 3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs
 4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.
                              Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.
@@ -1212,10 +1426,98 @@
 "transaction"              (string) hex string of the transaction
 
 Examples:
-> bitcoin-cli createrawtransaction "[{\"txid\":\"myid\",\"vout\":0}]" "{\"address\":0.01}"
-> bitcoin-cli createrawtransaction "[{\"txid\":\"myid\",\"vout\":0}]" "{\"data\":\"00010203\"}"
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\"txid\":\"myid\",\"vout\":0}]", "{\"address\":0.01}"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\"txid\":\"myid\",\"vout\":0}]", "{\"data\":\"00010203\"}"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+> bitcoin-cli createrawtransaction "[{\"txid\":\"myid\",\"vout\":0}]" "[{\"address\":0.01}]"
+> bitcoin-cli createrawtransaction "[{\"txid\":\"myid\",\"vout\":0}]" "[{\"data\":\"00010203\"}]"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\"txid\":\"myid\",\"vout\":0}]", "[{\"address\":0.01}]"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\"txid\":\"myid\",\"vout\":0}]", "[{\"data\":\"00010203\"}]"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: testmempoolaccept
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/testmempoolaccept/
+---
+
+testmempoolaccept ["rawtxs"] ( allowhighfees )
+
+Returns if raw transaction (serialized, hex-encoded) would be accepted by mempool.
+
+This checks if the transaction violates the consensus or policy rules.
+
+See sendrawtransaction call.
+
+Arguments:
+1. ["rawtxs"]       (array, required) An array of hex strings of raw transactions.
+                                        Length must be one for now.
+2. allowhighfees    (boolean, optional, default=false) Allow high fees
+
+Result:
+[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.
+                            Length is exactly one for now.
+ {
+  "txid"           (string) The transaction hash in hex
+  "allowed"        (boolean) If the mempool allows this tx to be inserted
+  "reject-reason"  (string) Rejection string (only present when 'allowed' is false)
+ }
+]
+
+Examples:
+
+Create a transaction
+> bitcoin-cli createrawtransaction "[{\"txid\" : \"mytxid\",\"vout\":0}]" "{\"myaddress\":0.01}"
+Sign the transaction, and get back the hex
+> bitcoin-cli signrawtransaction "myhex"
+
+Test acceptance of the transaction (signed hex)
+> bitcoin-cli testmempoolaccept "signedhex"
+
+As a json rpc call
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "testmempoolaccept", "params": [["signedhex"]] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: createpsbt
+btcversion: 0.17.0
+btcgroup: rawtransactions
+permalink: en/doc/0.17.0/rpc/rawtransactions/createpsbt/
+---
+
+createpsbt [{"txid":"id","vout":n},...] [{"address":amount},{"data":"hex"},...] ( locktime ) ( replaceable )
+
+Creates a transaction in the Partially Signed Transaction format.
+Implements the Creator role.
+
+Arguments:
+1. "inputs"                (array, required) A json array of json objects
+     [
+       {
+         "txid":"id",      (string, required) The transaction id
+         "vout":n,         (numeric, required) The output number
+         "sequence":n      (numeric, optional) The sequence number
+       } 
+       ,...
+     ]
+2. "outputs"               (array, required) a json array with outputs (key-value pairs)
+   [
+    {
+      "address": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC
+    },
+    {
+      "data": "hex"        (obj, optional) A key-value pair. The key must be "data", the value is hex encoded data
+    }
+    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also
+                             accepted as second parameter.
+   ]
+3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs
+4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.
+                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.
+
+Result:
+  "psbt"        (string)  The resulting raw transaction (base64-encoded string)
+
+Examples:
+> bitcoin-cli createpsbt "[{\"txid\":\"myid\",\"vout\":0}]" "[{\"data\":\"00010203\"}]"
 
 
 ---
@@ -1256,20 +1558,29 @@
 Result:
 {                           (json object)
     "size" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.
-    "fee" : n,              (numeric) transaction fee in BTC
-    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority
+    "fee" : n,              (numeric) transaction fee in BTC (DEPRECATED)
+    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)
     "time" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT
     "height" : n,           (numeric) block height when transaction entered pool
     "descendantcount" : n,  (numeric) number of in-mempool descendant transactions (including this one)
     "descendantsize" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)
-    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)
+    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)
     "ancestorcount" : n,    (numeric) number of in-mempool ancestor transactions (including this one)
     "ancestorsize" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)
-    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)
+    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)
     "wtxid" : hash,         (string) hash of serialized transaction, including witness data
+    "fees" : {
+        "base" : n,         (numeric) transaction fee in BTC
+        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC
+        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC
+        "descendant" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC
+    }
     "depends" : [           (array) unconfirmed transactions used as inputs for this transaction
         "transactionid",    (string) parent transaction id
        ... ]
+    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction
+        "transactionid",    (string) child transaction id
+       ... ]
 }
 
 Examples:
@@ -1303,20 +1614,29 @@
 {                           (json object)
   "transactionid" : {       (json object)
     "size" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.
-    "fee" : n,              (numeric) transaction fee in BTC
-    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority
+    "fee" : n,              (numeric) transaction fee in BTC (DEPRECATED)
+    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)
     "time" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT
     "height" : n,           (numeric) block height when transaction entered pool
     "descendantcount" : n,  (numeric) number of in-mempool descendant transactions (including this one)
     "descendantsize" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)
-    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)
+    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)
     "ancestorcount" : n,    (numeric) number of in-mempool ancestor transactions (including this one)
     "ancestorsize" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)
-    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)
+    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)
     "wtxid" : hash,         (string) hash of serialized transaction, including witness data
+    "fees" : {
+        "base" : n,         (numeric) transaction fee in BTC
+        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC
+        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC
+        "descendant" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC
+    }
     "depends" : [           (array) unconfirmed transactions used as inputs for this transaction
         "transactionid",    (string) parent transaction id
        ... ]
+    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction
+        "transactionid",    (string) child transaction id
+       ... ]
   }, ...
 }
 
@@ -1425,7 +1745,7 @@
 
 savemempool
 
-Dumps the mempool to disk.
+Dumps the mempool to disk. It will fail until the previous dump is fully loaded.
 
 Examples:
 > bitcoin-cli savemempool 
@@ -1584,20 +1904,29 @@
 {                           (json object)
   "transactionid" : {       (json object)
     "size" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.
-    "fee" : n,              (numeric) transaction fee in BTC
-    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority
+    "fee" : n,              (numeric) transaction fee in BTC (DEPRECATED)
+    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)
     "time" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT
     "height" : n,           (numeric) block height when transaction entered pool
     "descendantcount" : n,  (numeric) number of in-mempool descendant transactions (including this one)
     "descendantsize" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)
-    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)
+    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)
     "ancestorcount" : n,    (numeric) number of in-mempool ancestor transactions (including this one)
     "ancestorsize" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)
-    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)
+    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)
     "wtxid" : hash,         (string) hash of serialized transaction, including witness data
+    "fees" : {
+        "base" : n,         (numeric) transaction fee in BTC
+        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC
+        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC
+        "descendant" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC
+    }
     "depends" : [           (array) unconfirmed transactions used as inputs for this transaction
         "transactionid",    (string) parent transaction id
        ... ]
+    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction
+        "transactionid",    (string) child transaction id
+       ... ]
   }, ...
 }
 
@@ -1623,12 +1952,13 @@
 
 Result:
 {
-  "time": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.
-  "txcount": xxxxx,             (numeric) The total number of transactions in the chain up to that point.
-  "window_block_count": xxxxx,  (numeric) Size of the window in number of blocks.
-  "window_tx_count": xxxxx,     (numeric) The number of transactions in the window. Only returned if "window_block_count" is > 0.
-  "window_interval": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if "window_block_count" is > 0.
-  "txrate": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if "window_interval" is > 0.
+  "time": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.
+  "txcount": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.
+  "window_final_block_hash": "...",      (string) The hash of the final block in the window.
+  "window_block_count": xxxxx,           (numeric) Size of the window in number of blocks.
+  "window_tx_count": xxxxx,              (numeric) The number of transactions in the window. Only returned if "window_block_count" is > 0.
+  "window_interval": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if "window_block_count" is > 0.
+  "txrate": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if "window_interval" is > 0.
 }
 
 Examples:
@@ -1656,6 +1986,61 @@
 
 
 ---
+name: scantxoutset
+btcversion: 0.17.0
+btcgroup: blockchain
+permalink: en/doc/0.17.0/rpc/blockchain/scantxoutset/
+---
+
+scantxoutset <action> ( <scanobjects> )
+
+EXPERIMENTAL warning: this call may be removed or changed in future releases.
+
+Scans the unspent transaction output set for entries that match certain output descriptors.
+Examples of output descriptors are:
+    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)
+    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts
+    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey
+    pkh(<pubkey>)                        P2PKH outputs for the given pubkey
+    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys
+
+In the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one
+or more path elements separated by "/", and optionally ending in "/*" (unhardened), or "/*'" or "/*h" (hardened) to specify all
+unhardened or hardened child keys.
+In the latter case, a range needs to be specified by below if different from 1000.
+For more information on output descriptors, see the documentation in the doc/descriptors.md file.
+
+Arguments:
+1. "action"                       (string, required) The action to execute
+                                      "start" for starting a scan
+                                      "abort" for aborting the current scan (returns true when abort was successful)
+                                      "status" for progress report (in %) of the current scan
+2. "scanobjects"                  (array, required) Array of scan objects
+    [                             Every scan object is either a string descriptor or an object:
+        "descriptor",             (string, optional) An output descriptor
+        {                         (object, optional) An object with output descriptor and metadata
+          "desc": "descriptor",   (string, required) An output descriptor
+          "range": n,             (numeric, optional) Up to what child index HD chains should be explored (default: 1000)
+        },
+        ...
+    ]
+
+Result:
+{
+  "unspents": [
+    {
+    "txid" : "transactionid",     (string) The transaction id
+    "vout": n,                    (numeric) the vout value
+    "scriptPubKey" : "script",    (string) the script key
+    "amount" : x.xxx,             (numeric) The total amount in BTC of the unspent output
+    "height" : n,                 (numeric) Height of the unspent transaction output
+   }
+   ,...], 
+ "total_amount" : x.xxx,          (numeric) The total amount of all found unspent outputs in BTC
+]
+
+
+---
 name: gettxout
 btcversion: 0.17.0
 btcgroup: blockchain
@@ -1746,22 +2131,88 @@
 
 
 ---
-name: getchaintips
+name: getblockstats
 btcversion: 0.17.0
 btcgroup: blockchain
-permalink: en/doc/0.17.0/rpc/blockchain/getchaintips/
+permalink: en/doc/0.17.0/rpc/blockchain/getblockstats/
 ---
 
-getchaintips
-Return information about all known tips in the block tree, including the main chain as well as orphaned branches.
+getblockstats hash_or_height ( stats )
+
+Compute per block statistics for a given window. All amounts are in satoshis.
+It won't work for some heights with pruning.
+It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.
+
+Arguments:
+1. "hash_or_height"     (string or numeric, required) The block hash or height of the target block
+2. "stats"              (array,  optional) Values to plot, by default all values (see result below)
+    [
+      "height",         (string, optional) Selected statistic
+      "time",           (string, optional) Selected statistic
+      ,...
+    ]
 
 Result:
-[
-  {
-    "height": xxxx,         (numeric) height of the chain tip
-    "hash": "xxxx",         (string) block hash of the tip
-    "branchlen": 0          (numeric) zero for main chain
-    "status": "active"      (string) "active" for the main chain
+{                           (json object)
+  "avgfee": xxxxx,          (numeric) Average fee in the block
+  "avgfeerate": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)
+  "avgtxsize": xxxxx,       (numeric) Average transaction size
+  "blockhash": xxxxx,       (string) The block hash (to check for potential reorgs)
+  "feerate_percentiles": [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)
+      "10th_percentile_feerate",      (numeric) The 10th percentile feerate
+      "25th_percentile_feerate",      (numeric) The 25th percentile feerate
+      "50th_percentile_feerate",      (numeric) The 50th percentile feerate
+      "75th_percentile_feerate",      (numeric) The 75th percentile feerate
+      "90th_percentile_feerate",      (numeric) The 90th percentile feerate
+  ],
+  "height": xxxxx,          (numeric) The height of the block
+  "ins": xxxxx,             (numeric) The number of inputs (excluding coinbase)
+  "maxfee": xxxxx,          (numeric) Maximum fee in the block
+  "maxfeerate": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)
+  "maxtxsize": xxxxx,       (numeric) Maximum transaction size
+  "medianfee": xxxxx,       (numeric) Truncated median fee in the block
+  "mediantime": xxxxx,      (numeric) The block median time past
+  "mediantxsize": xxxxx,    (numeric) Truncated median transaction size
+  "minfee": xxxxx,          (numeric) Minimum fee in the block
+  "minfeerate": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)
+  "mintxsize": xxxxx,       (numeric) Minimum transaction size
+  "outs": xxxxx,            (numeric) The number of outputs
+  "subsidy": xxxxx,         (numeric) The block subsidy
+  "swtotal_size": xxxxx,    (numeric) Total size of all segwit transactions
+  "swtotal_weight": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)
+  "swtxs": xxxxx,           (numeric) The number of segwit transactions
+  "time": xxxxx,            (numeric) The block time
+  "total_out": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])
+  "total_size": xxxxx,      (numeric) Total size of all non-coinbase transactions
+  "total_weight": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)
+  "totalfee": xxxxx,        (numeric) The fee total
+  "txs": xxxxx,             (numeric) The number of transactions (excluding coinbase)
+  "utxo_increase": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs
+  "utxo_size_inc": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)
+}
+
+Examples:
+> bitcoin-cli getblockstats 1000 '["minfeerate","avgfeerate"]'
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockstats", "params": [1000 '["minfeerate","avgfeerate"]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: getchaintips
+btcversion: 0.17.0
+btcgroup: blockchain
+permalink: en/doc/0.17.0/rpc/blockchain/getchaintips/
+---
+
+getchaintips
+Return information about all known tips in the block tree, including the main chain as well as orphaned branches.
+
+Result:
+[
+  {
+    "height": xxxx,         (numeric) height of the chain tip
+    "hash": "xxxx",         (string) block hash of the tip
+    "branchlen": 0          (numeric) zero for main chain
+    "status": "active"      (string) "active" for the main chain
   },
   {
     "height": xxxx,
@@ -1917,20 +2368,29 @@
 {                           (json object)
   "transactionid" : {       (json object)
     "size" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.
-    "fee" : n,              (numeric) transaction fee in BTC
-    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority
+    "fee" : n,              (numeric) transaction fee in BTC (DEPRECATED)
+    "modifiedfee" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)
     "time" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT
     "height" : n,           (numeric) block height when transaction entered pool
     "descendantcount" : n,  (numeric) number of in-mempool descendant transactions (including this one)
     "descendantsize" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)
-    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)
+    "descendantfees" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)
     "ancestorcount" : n,    (numeric) number of in-mempool ancestor transactions (including this one)
     "ancestorsize" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)
-    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one)
+    "ancestorfees" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)
     "wtxid" : hash,         (string) hash of serialized transaction, including witness data
+    "fees" : {
+        "base" : n,         (numeric) transaction fee in BTC
+        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in BTC
+        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC
+        "descendant" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC
+    }
     "depends" : [           (array) unconfirmed transactions used as inputs for this transaction
         "transactionid",    (string) parent transaction id
        ... ]
+    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction
+        "transactionid",    (string) child transaction id
+       ... ]
   }, ...
 }
 
@@ -1954,8 +2414,8 @@
 If the change output is not big enough to cover the increased fee, the command will currently fail
 instead of adding new inputs to compensate. (A future implementation could improve this.)
 The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.
-By default, the new fee will be calculated automatically using estimatefee.
-The user can specify a confirmation target for estimatefee.
+By default, the new fee will be calculated automatically using estimatesmartfee.
+The user can specify a confirmation target for estimatesmartfee.
 Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.
 At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee
 returned by getnetworkinfo) to enter the node's mempool.
@@ -2003,12 +2463,14 @@
 permalink: en/doc/0.17.0/rpc/wallet/listtransactions/
 ---
 
-listtransactions ( "account" count skip include_watchonly)
+listtransactions (dummy count skip include_watchonly)
 
 Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.
+Note that the "account" argument and "otheraccount" return value have been removed in V0.17. To use this RPC with an "account" argument, restart
+bitcoind with -deprecatedrpc=accounts
 
 Arguments:
-1. "account"    (string, optional) DEPRECATED. The account name. Should be "*".
+1. "dummy"    (string, optional) If set, should be "*" for backwards compatibility.
 2. count          (numeric, optional, default=10) The number of transactions to return
 3. skip           (numeric, optional, default=0) The number of transactions to skip
 4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')
@@ -2016,38 +2478,24 @@
 Result:
 [
   {
-    "account":"accountname",       (string) DEPRECATED. The account name associated with the transaction. 
-                                                It will be "" for the default account.
-    "address":"address",    (string) The bitcoin address of the transaction. Not present for 
-                                                move transactions (category = move).
-    "category":"send|receive|move", (string) The transaction category. 'move' is a local (off blockchain)
-                                                transaction between accounts, and not associated with an address,
-                                                transaction id or block. 'send' and 'receive' transactions are 
-                                                associated with an address, transaction id and block details
-    "amount": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the
-                                         'move' category for moves outbound. It is positive for the 'receive' category,
-                                         and for the 'move' category for inbound funds.
+    "address":"address",    (string) The bitcoin address of the transaction.
+    "category":"send|receive", (string) The transaction category.
+    "amount": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and is positive
+                                        for the 'receive' category,
     "label": "label",       (string) A comment for the address/transaction, if any
     "vout": n,                (numeric) the vout value
     "fee": x.xxx,             (numeric) The amount of the fee in BTC. This is negative and only available for the 
                                          'send' category of transactions.
-    "confirmations": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 
-                                         'receive' category of transactions. Negative confirmations indicate the
+    "confirmations": n,       (numeric) The number of confirmations for the transaction. Negative confirmations indicate the
                                          transaction conflicts with the block chain
     "trusted": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.
-    "blockhash": "hashvalue", (string) The block hash containing the transaction. Available for 'send' and 'receive'
-                                          category of transactions.
-    "blockindex": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'
-                                          category of transactions.
+    "blockhash": "hashvalue", (string) The block hash containing the transaction.
+    "blockindex": n,          (numeric) The index of the transaction in the block that includes it.
     "blocktime": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).
-    "txid": "transactionid", (string) The transaction id. Available for 'send' and 'receive' category of transactions.
+    "txid": "transactionid", (string) The transaction id.
     "time": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).
-    "timereceived": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available 
-                                          for 'send' and 'receive' category of transactions.
+    "timereceived": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).
     "comment": "...",       (string) If a comment is associated with the transaction.
-    "otheraccount": "accountname",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came 
-                                          from (for receiving funds, positive amounts), or went to (for sending funds,
-                                          negative amounts).
     "bip125-replaceable": "yes|no|unknown",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);
                                                      may be unknown for unconfirmed transactions not in the mempool
     "abandoned": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 
@@ -2074,12 +2522,15 @@
 permalink: en/doc/0.17.0/rpc/wallet/sendmany/
 ---
 
-sendmany "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] replaceable conf_target "estimate_mode")
+sendmany "" {"address":amount,...} ( minconf "comment" ["address",...] replaceable conf_target "estimate_mode")
 
 Send multiple times. Amounts are double-precision floating point numbers.
+Note that the "fromaccount" argument has been removed in V0.17. To use this RPC with a "fromaccount" argument, restart
+bitcoind with -deprecatedrpc=accounts
+
 
 Arguments:
-1. "fromaccount"         (string, required) DEPRECATED. The account to send the funds from. Should be "" for the default account
+1. "dummy"               (string, required) Must be set to "" for backwards compatibility.
 2. "amounts"             (string, required) A json object with addresses and amounts
     {
       "address":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in BTC is the value
@@ -2145,6 +2596,62 @@
 
 
 ---
+name: signrawtransactionwithwallet
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/signrawtransactionwithwallet/
+---
+
+signrawtransactionwithwallet "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )
+
+Sign inputs for raw transaction (serialized, hex-encoded).
+The second optional argument (may be null) is an array of previous transaction outputs that
+this transaction depends on but may not yet be in the block chain.
+
+
+Arguments:
+1. "hexstring"                      (string, required) The transaction hex string
+2. "prevtxs"                        (string, optional) An json array of previous dependent transaction outputs
+     [                              (json array of json objects, or 'null' if none provided)
+       {
+         "txid":"id",               (string, required) The transaction id
+         "vout":n,                  (numeric, required) The output number
+         "scriptPubKey": "hex",     (string, required) script key
+         "redeemScript": "hex",     (string, required for P2SH or P2WSH) redeem script
+         "amount": value            (numeric, required) The amount spent
+       }
+       ,...
+    ]
+3. "sighashtype"                    (string, optional, default=ALL) The signature hash type. Must be one of
+       "ALL"
+       "NONE"
+       "SINGLE"
+       "ALL|ANYONECANPAY"
+       "NONE|ANYONECANPAY"
+       "SINGLE|ANYONECANPAY"
+
+Result:
+{
+  "hex" : "value",                  (string) The hex-encoded raw transaction with signature(s)
+  "complete" : true|false,          (boolean) If the transaction has a complete set of signatures
+  "errors" : [                      (json array of objects) Script verification errors (if there are any)
+    {
+      "txid" : "hash",              (string) The hash of the referenced, previous transaction
+      "vout" : n,                   (numeric) The index of the output to spent and used as input
+      "scriptSig" : "hex",          (string) The hex-encoded signature script
+      "sequence" : n,               (numeric) Script sequence number
+      "error" : "text"              (string) Verification or signing error related to the input
+    }
+    ,...
+  ]
+}
+
+Examples:
+> bitcoin-cli signrawtransactionwithwallet "myhex"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransactionwithwallet", "params": ["myhex"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
 name: importprunedfunds
 btcversion: 0.17.0
 btcgroup: wallet
@@ -2161,6 +2668,42 @@
 
 
 ---
+name: walletprocesspsbt
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/walletprocesspsbt/
+---
+
+walletprocesspsbt "psbt" ( sign "sighashtype" bip32derivs )
+
+Update a PSBT with input information from our wallet and then sign inputs
+that we can sign for.
+
+
+Arguments:
+1. "psbt"                      (string, required) The transaction base64 string
+2. sign                          (boolean, optional, default=true) Also sign the transaction when updating
+3. "sighashtype"            (string, optional, default=ALL) The signature hash type to sign with if not specified by the PSBT. Must be one of
+       "ALL"
+       "NONE"
+       "SINGLE"
+       "ALL|ANYONECANPAY"
+       "NONE|ANYONECANPAY"
+       "SINGLE|ANYONECANPAY"
+4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them
+
+Result:
+{
+  "psbt" : "value",          (string) The base64-encoded partially signed transaction
+  "complete" : true|false,   (boolean) If the transaction has a complete set of signatures
+  ]
+}
+
+Examples:
+> bitcoin-cli walletprocesspsbt "psbt"
+
+
+---
 name: dumpprivkey
 btcversion: 0.17.0
 btcgroup: wallet
@@ -2232,13 +2775,14 @@
 importprivkey "privkey" ( "label" ) ( rescan )
 
 Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.
+Hint: use importmulti to import more than one private key.
 
 Arguments:
 1. "privkey"          (string, required) The private key (see dumpprivkey)
 2. "label"            (string, optional, default="") An optional label
 3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions
 
-Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls
 may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
 
 Examples:
@@ -2266,18 +2810,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/setaccount/
 ---
 
-setaccount "address" "account"
-
-DEPRECATED. Sets the account associated with the given address.
-
-Arguments:
-1. "address"         (string, required) The bitcoin address to be associated with an account.
-2. "account"         (string, required) The account to assign the address to.
-
-Examples:
-> bitcoin-cli setaccount "1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX" "tabby"
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setaccount", "params": ["1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX", "tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
+setaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: getreceivedbyaddress
@@ -2319,30 +2852,78 @@
 permalink: en/doc/0.17.0/rpc/wallet/getreceivedbyaccount/
 ---
 
-getreceivedbyaccount "account" ( minconf )
+getreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
+
+---
+name: walletcreatefundedpsbt
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/walletcreatefundedpsbt/
+---
+
+walletcreatefundedpsbt [{"txid":"id","vout":n},...] [{"address":amount},{"data":"hex"},...] ( locktime ) ( replaceable ) ( options bip32derivs )
 
-DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.
+Creates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough
+Implements the Creator and Updater roles.
 
 Arguments:
-1. "account"      (string, required) The selected account, may be the default account using "".
-2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.
+1. "inputs"                (array, required) A json array of json objects
+     [
+       {
+         "txid":"id",      (string, required) The transaction id
+         "vout":n,         (numeric, required) The output number
+         "sequence":n      (numeric, optional) The sequence number
+       } 
+       ,...
+     ]
+2. "outputs"               (array, required) a json array with outputs (key-value pairs)
+   [
+    {
+      "address": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC
+    },
+    {
+      "data": "hex"        (obj, optional) A key-value pair. The key must be "data", the value is hex encoded data
+    }
+    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also
+                             accepted as second parameter.
+   ]
+3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs
+                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.
+4. options                 (object, optional)
+   {
+     "changeAddress"          (string, optional, default pool address) The bitcoin address to receive the change
+     "changePosition"         (numeric, optional, default random) The index of the change output
+     "change_type"            (string, optional) The output type to use. Only valid if changeAddress is not specified. Options are "legacy", "p2sh-segwit", and "bech32". Default is set by -changetype.
+     "includeWatching"        (boolean, optional, default false) Also select inputs which are watch only
+     "lockUnspents"           (boolean, optional, default false) Lock selected unspent outputs
+     "feeRate"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in BTC/kB
+     "subtractFeeFromOutputs" (array, optional) A json array of integers.
+                              The fee will be equally deducted from the amount of each specified output.
+                              The outputs are specified by their zero-based index, before any change output is added.
+                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.
+                              If no outputs are specified here, the sender pays the fee.
+                                  [vout_index,...]
+     "replaceable"            (boolean, optional) Marks this transaction as BIP125 replaceable.
+                              Allows this transaction to be replaced by a transaction with higher fees
+     "conf_target"            (numeric, optional) Confirmation target (in blocks)
+     "estimate_mode"          (string, optional, default=UNSET) The fee estimate mode, must be one of:
+         "UNSET"
+         "ECONOMICAL"
+         "CONSERVATIVE"
+   }
+5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them
 
 Result:
-amount              (numeric) The total amount in BTC received for this account.
+{
+  "psbt": "value",        (string)  The resulting raw transaction (base64-encoded string)
+  "fee":       n,         (numeric) Fee in BTC the resulting transaction pays
+  "changepos": n          (numeric) The position of the added change output, or -1
+}
 
 Examples:
 
-Amount received by the default account with at least 1 confirmation
-> bitcoin-cli getreceivedbyaccount ""
-
-Amount received at the tabby account including unconfirmed amounts with zero confirmations
-> bitcoin-cli getreceivedbyaccount "tabby" 0
-
-The amount with at least 6 confirmations
-> bitcoin-cli getreceivedbyaccount "tabby" 6
-
-As a json rpc call
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getreceivedbyaccount", "params": ["tabby", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+Create a transaction with no inputs
+> bitcoin-cli walletcreatefundedpsbt "[{\"txid\":\"myid\",\"vout\":0}]" "[{\"data\":\"00010203\"}]"
 
 
 ---
@@ -2447,34 +3028,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/listaccounts/
 ---
 
-listaccounts ( minconf include_watchonly)
-
-DEPRECATED. Returns Object that has account names as keys, account balances as values.
-
-Arguments:
-1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations
-2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')
-
-Result:
-{                      (json object where keys are account names, and values are numeric balances
-  "account": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.
-  ...
-}
-
-Examples:
-
-List account balances where there at least 1 confirmation
-> bitcoin-cli listaccounts 
-
-List account balances including zero confirmation transactions
-> bitcoin-cli listaccounts 0
-
-List account balances for 6 or more confirmations
-> bitcoin-cli listaccounts 6
-
-As json rpc call
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
+listaccounts (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: getaccountaddress
@@ -2483,22 +3037,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/getaccountaddress/
 ---
 
-getaccountaddress "account"
-
-DEPRECATED. Returns the current Bitcoin address for receiving payments to this account.
-
-Arguments:
-1. "account"       (string, required) The account name for the address. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.
-
-Result:
-"address"          (string) The account bitcoin address
-
-Examples:
-> bitcoin-cli getaccountaddress 
-> bitcoin-cli getaccountaddress ""
-> bitcoin-cli getaccountaddress "myaccount"
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccountaddress", "params": ["myaccount"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
+getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: getrawchangeaddress
@@ -2552,29 +3091,15 @@
 permalink: en/doc/0.17.0/rpc/wallet/getbalance/
 ---
 
-getbalance ( "account" minconf include_watchonly )
+getbalance ( "(dummy)" minconf include_watchonly )
 
-If account is not specified, returns the server's total available balance.
+Returns the total available balance.
 The available balance is what the wallet considers currently spendable, and is
 thus affected by options which limit spendability such as -spendzeroconfchange.
-If account is specified (DEPRECATED), returns the balance in the account.
-Note that the account "" is not the same as leaving the parameter out.
-The server total may be different to the balance in the default "" account.
-
-Arguments:
-1. "account"         (string, optional) DEPRECATED. The account string may be given as a
-                     specific account name to find the balance associated with wallet keys in
-                     a named account, or as the empty string ("") to find the balance
-                     associated with wallet keys not in any named account, or as "*" to find
-                     the balance associated with all wallet keys regardless of account.
-                     When this option is specified, it calculates the balance in a different
-                     way than when it is not specified, and which can count spends twice when
-                     there are conflicting pending transactions (such as those created by
-                     the bumpfee command), temporarily resulting in low or even negative
-                     balances. In general, account balance calculation is not considered
-                     reliable and has resulted in confusing outcomes, so it is recommended to
-                     avoid passing this argument.
-2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.
+
+Arguments:
+1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to "*".
+2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.
 3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')
 
 Result:
@@ -2608,7 +3133,7 @@
 2. "label"            (string, optional, default="") An optional label
 3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions
 
-Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls
 may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
 
 Examples:
@@ -2661,6 +3186,62 @@
 
 
 ---
+name: getaddressinfo
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/getaddressinfo/
+---
+
+getaddressinfo "address"
+
+Return information about the given bitcoin address. Some information requires the address
+to be in the wallet.
+
+Arguments:
+1. "address"                    (string, required) The bitcoin address to get the information of.
+
+Result:
+{
+  "address" : "address",        (string) The bitcoin address validated
+  "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address
+  "ismine" : true|false,        (boolean) If the address is yours or not
+  "iswatchonly" : true|false,   (boolean) If the address is watchonly
+  "isscript" : true|false,      (boolean) If the key is a script
+  "iswitness" : true|false,     (boolean) If the address is a witness address
+  "witness_version" : version   (numeric, optional) The version number of the witness program
+  "witness_program" : "hex"     (string, optional) The hex value of the witness program
+  "script" : "type"             (string, optional) The output script type. Only if "isscript" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown
+  "hex" : "hex",                (string, optional) The redeemscript for the p2sh address
+  "pubkeys"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if "script" is "multisig")
+    [
+      "pubkey"
+      ,...
+    ]
+  "sigsrequired" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if "script" is "multisig")
+  "pubkey" : "publickeyhex",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)
+  "embedded" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata ("timestamp", "hdkeypath", "hdseedid") and relation to the wallet ("ismine", "iswatchonly", "account").
+  "iscompressed" : true|false,  (boolean) If the address is compressed
+  "label" :  "label"         (string) The label associated with the address, "" is the default account
+  "account" : "account"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, "" is the default account
+  "timestamp" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)
+  "hdkeypath" : "keypath"       (string, optional) The HD keypath if the key is HD and available
+  "hdseedid" : "<hash160>"      (string, optional) The Hash160 of the HD seed
+  "hdmasterkeyid" : "<hash160>" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.
+  "labels"                      (object) Array of labels associated with the address.
+    [
+      { (json object of label data)
+        "name": "labelname" (string) The label
+        "purpose": "string" (string) Purpose of address ("send" for sending address, "receive" for receiving address)
+      },...
+    ]
+}
+
+Examples:
+> bitcoin-cli getaddressinfo "1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressinfo", "params": ["1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
 name: listaddressgroupings
 btcversion: 0.17.0
 btcgroup: wallet
@@ -2679,7 +3260,7 @@
     [
       "address",            (string) The bitcoin address
       amount,                 (numeric) The amount in BTC
-      "account"             (string, optional) DEPRECATED. The account
+      "label"               (string, optional) The label
     ]
     ,...
   ]
@@ -2714,7 +3295,7 @@
 Result:
 {
   "transactions": [
-    "account":"accountname",       (string) DEPRECATED. The account name associated with the transaction. Will be "" for the default account.
+    "account":"accountname",       (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. Will be "" for the default account.
     "address":"address",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).
     "category":"send|receive",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.
     "amount": x.xxx,          (numeric) The amount in BTC. This is negative for the 'send' category, and for the 'move' category for moves 
@@ -2738,7 +3319,7 @@
   ],
   "removed": [
     <structure is the same as "transactions" above, only present if include_removed=true>
-    Note: transactions that were readded in the active chain will appear as-is in this array, and may thus have a positive confirmation count.
+    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.
   ],
   "lastblock": "lastblockhash"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones
 }
@@ -2796,7 +3377,7 @@
      "rescan": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports
   }
 
-Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls
 may report that the imported keys, addresses or scripts exists but related transactions are still missing.
 
 Examples:
@@ -2814,32 +3395,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/listreceivedbyaccount/
 ---
 
-listreceivedbyaccount ( minconf include_empty include_watchonly)
-
-DEPRECATED. List balances by account.
-
-Arguments:
-1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.
-2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.
-3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').
-
-Result:
-[
-  {
-    "involvesWatchonly" : true,   (bool) Only returned if imported addresses were involved in transaction
-    "account" : "accountname",  (string) The account name of the receiving account
-    "amount" : x.xxx,             (numeric) The total amount received by addresses with this account
-    "confirmations" : n,          (numeric) The number of confirmations of the most recent transaction included
-    "label" : "label"           (string) A comment for the address/transaction, if any
-  }
-  ,...
-]
-
-Examples:
-> bitcoin-cli listreceivedbyaccount 
-> bitcoin-cli listreceivedbyaccount 6 true
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaccount", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
+listreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: settxfee
@@ -2850,7 +3406,7 @@
 
 settxfee amount
 
-Set the transaction fee per kB. Overwrites the paytxfee parameter.
+Set the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.
 
 Arguments:
 1. amount         (numeric or string, required) The transaction fee in BTC/kB
@@ -2870,7 +3426,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/listreceivedbyaddress/
 ---
 
-listreceivedbyaddress ( minconf include_empty include_watchonly)
+listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )
 
 List balances by receiving address.
 
@@ -2878,16 +3434,17 @@
 1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.
 2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.
 3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').
+4. address_filter    (string, optional) If present, only return information on this address.
 
 Result:
 [
   {
     "involvesWatchonly" : true,        (bool) Only returned if imported addresses were involved in transaction
     "address" : "receivingaddress",  (string) The receiving address
-    "account" : "accountname",       (string) DEPRECATED. The account of the receiving address. The default account is "".
+    "account" : "accountname",       (string) DEPRECATED. Backwards compatible alias for label.
     "amount" : x.xxx,                  (numeric) The total amount in BTC received by the address
     "confirmations" : n,               (numeric) The number of confirmations of the most recent transaction included
-    "label" : "label",               (string) A comment for the address/transaction, if any
+    "label" : "label",               (string) The label of the receiving address. The default label is "".
     "txids": [
        "txid",                         (string) The ids of transactions received with the address 
        ...
@@ -2900,6 +3457,7 @@
 > bitcoin-cli listreceivedbyaddress 
 > bitcoin-cli listreceivedbyaddress 6 true
 > curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaddress", "params": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaddress", "params": [6, true, true, "1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
 
 
 ---
@@ -2915,7 +3473,7 @@
 This will mark this transaction and all its in-wallet descendants as abandoned which will allow
 for their inputs to be respent.  It can be used to replace "stuck" or evicted transactions.
 It only works on transactions which are not included in a block and are not currently in the mempool.
-It has no effect on transactions which are already conflicted or abandoned.
+It has no effect on transactions which are already abandoned.
 
 Arguments:
 1. "txid"    (string, required) The transaction id
@@ -2939,18 +3497,20 @@
 
 Result:
 {
-  "walletname": xxxxx,             (string) the wallet name
-  "walletversion": xxxxx,          (numeric) the wallet version
-  "balance": xxxxxxx,              (numeric) the total confirmed balance of the wallet in BTC
-  "unconfirmed_balance": xxx,      (numeric) the total unconfirmed balance of the wallet in BTC
-  "immature_balance": xxxxxx,      (numeric) the total immature balance of the wallet in BTC
-  "txcount": xxxxxxx,              (numeric) the total number of transactions in the wallet
-  "keypoololdest": xxxxxx,         (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool
-  "keypoolsize": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)
-  "keypoolsize_hd_internal": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)
-  "unlocked_until": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked
-  "paytxfee": x.xxxx,              (numeric) the transaction fee configuration, set in BTC/kB
-  "hdmasterkeyid": "<hash160>"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)
+  "walletname": xxxxx,               (string) the wallet name
+  "walletversion": xxxxx,            (numeric) the wallet version
+  "balance": xxxxxxx,                (numeric) the total confirmed balance of the wallet in BTC
+  "unconfirmed_balance": xxx,        (numeric) the total unconfirmed balance of the wallet in BTC
+  "immature_balance": xxxxxx,        (numeric) the total immature balance of the wallet in BTC
+  "txcount": xxxxxxx,                (numeric) the total number of transactions in the wallet
+  "keypoololdest": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool
+  "keypoolsize": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)
+  "keypoolsize_hd_internal": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)
+  "unlocked_until": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked
+  "paytxfee": x.xxxx,                (numeric) the transaction fee configuration, set in BTC/kB
+  "hdseedid": "<hash160>"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)
+  "hdmasterkeyid": "<hash160>"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.
+  "private_keys_enabled": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)
 }
 
 Examples:
@@ -2991,6 +3551,41 @@
 
 
 ---
+name: getaddressbyaccount
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/getaddressbyaccount/
+---
+
+help: unknown command: getaddressbyaccount
+
+---
+name: createwallet
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/createwallet/
+---
+
+createwallet "wallet_name" ( disable_private_keys )
+
+Creates and loads a new wallet.
+
+Arguments:
+1. "wallet_name"          (string, required) The name for the new wallet. If this is a path, the wallet will be created at the path location.
+2. disable_private_keys   (boolean, optional, default: false) Disable the possibility of private keys (only watchonlys are possible in this mode).
+
+Result:
+{
+  "name" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.
+  "warning" : <warning>,            (string) Warning message if wallet was not loaded cleanly.
+}
+
+Examples:
+> bitcoin-cli createwallet "testwallet"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createwallet", "params": ["testwallet"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
 name: listlockunspent
 btcversion: 0.17.0
 btcgroup: wallet
@@ -3030,31 +3625,6 @@
 
 
 ---
-name: getaddressesbyaccount
-btcversion: 0.17.0
-btcgroup: wallet
-permalink: en/doc/0.17.0/rpc/wallet/getaddressesbyaccount/
----
-
-getaddressesbyaccount "account"
-
-DEPRECATED. Returns the list of addresses for the given account.
-
-Arguments:
-1. "account"        (string, required) The account name.
-
-Result:
-[                     (json array of string)
-  "address"         (string) a bitcoin address associated with the given account
-  ,...
-]
-
-Examples:
-> bitcoin-cli getaddressesbyaccount "tabby"
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressesbyaccount", "params": ["tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
-
----
 name: listunspent
 btcversion: 0.17.0
 btcgroup: wallet
@@ -3091,7 +3661,8 @@
     "txid" : "txid",          (string) the transaction id 
     "vout" : n,               (numeric) the vout value
     "address" : "address",    (string) the bitcoin address
-    "account" : "account",    (string) DEPRECATED. The associated account, or "" for the default account
+    "label" : "label",        (string) The associated label, or "" for the default label
+    "account" : "account",    (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The associated account, or "" for the default account
     "scriptPubKey" : "key",   (string) the script key
     "amount" : x.xxx,         (numeric) the transaction output amount in BTC
     "confirmations" : n,      (numeric) The number of confirmations
@@ -3174,6 +3745,59 @@
 
 
 ---
+name: unloadwallet
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/unloadwallet/
+---
+
+unloadwallet ( "wallet_name" )
+Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.
+Specifying the wallet name on a wallet endpoint is invalid.
+Arguments:
+1. "wallet_name"    (string, optional) The name of the wallet to unload.
+
+Examples:
+> bitcoin-cli unloadwallet wallet_name
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "unloadwallet", "params": [wallet_name] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: listlabels
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/listlabels/
+---
+
+listlabels ( "purpose" )
+
+Returns the list of all labels, or labels that are assigned to addresses with a specific purpose.
+
+Arguments:
+1. "purpose"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.
+
+Result:
+[               (json array of string)
+  "label",      (string) Label name
+  ...
+]
+
+Examples:
+
+List all labels
+> bitcoin-cli listlabels 
+
+List labels that have receiving addresses
+> bitcoin-cli listlabels receive
+
+List labels that have sending addresses
+> bitcoin-cli listlabels send
+
+As json rpc call
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listlabels", "params": [receive] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
 name: importaddress
 btcversion: 0.17.0
 btcgroup: wallet
@@ -3182,15 +3806,15 @@
 
 importaddress "address" ( "label" rescan p2sh )
 
-Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.
+Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.
 
 Arguments:
-1. "script"           (string, required) The hex-encoded script (or address)
+1. "address"          (string, required) The Bitcoin address (or hex-encoded script)
 2. "label"            (string, optional, default="") An optional label
 3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions
 4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well
 
-Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls
 may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
 If you have the full public key, you should call importpubkey instead of this.
 
@@ -3199,14 +3823,14 @@
 
 Examples:
 
-Import a script with rescan
-> bitcoin-cli importaddress "myscript"
+Import an address with rescan
+> bitcoin-cli importaddress "myaddress"
 
 Import using a label without rescan
-> bitcoin-cli importaddress "myscript" "testing" false
+> bitcoin-cli importaddress "myaddress" "testing" false
 
 As a JSON-RPC call
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importaddress", "params": ["myscript", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importaddress", "params": ["myaddress", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
 
 
 ---
@@ -3216,38 +3840,7 @@
 permalink: en/doc/0.17.0/rpc/wallet/sendfrom/
 ---
 
-sendfrom "fromaccount" "toaddress" amount ( minconf "comment" "comment_to" )
-
-DEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.
-
-Arguments:
-1. "fromaccount"       (string, required) The name of the account to send funds from. May be the default account using "".
-                       Specifying an account does not influence coin selection, but it does associate the newly created
-                       transaction with the account, so the account's balance computation and transaction history can reflect
-                       the spend.
-2. "toaddress"         (string, required) The bitcoin address to send funds to.
-3. amount                (numeric or string, required) The amount in BTC (transaction fee is added on top).
-4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.
-5. "comment"           (string, optional) A comment used to store what the transaction is for. 
-                                     This is not part of the transaction, just kept in your wallet.
-6. "comment_to"        (string, optional) An optional comment to store the name of the person or organization 
-                                     to which you're sending the transaction. This is not part of the transaction, 
-                                     it is just kept in your wallet.
-
-Result:
-"txid"                 (string) The transaction id.
-
-Examples:
-
-Send 0.01 BTC from the default account to the address, must have at least 1 confirmation
-> bitcoin-cli sendfrom "" "1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd" 0.01
-
-Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations
-> bitcoin-cli sendfrom "tabby" "1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd" 0.01 6 "donation" "seans outpost"
-
-As a json rpc call
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendfrom", "params": ["tabby", "1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd", 0.01, 6, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
-
+sendfrom (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: getnewaddress
@@ -3256,14 +3849,14 @@
 permalink: en/doc/0.17.0/rpc/wallet/getnewaddress/
 ---
 
-getnewaddress ( "account" "address_type" )
+getnewaddress ( "label" "address_type" )
 
 Returns a new Bitcoin address for receiving payments.
-If 'account' is specified (DEPRECATED), it is added to the address book 
-so payments received with the address will be credited to 'account'.
+If 'label' is specified, it is added to the address book 
+so payments received with the address will be associated with 'label'.
 
 Arguments:
-1. "account"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account "" is used. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.
+1. "label"          (string, optional) The label name for the address to be linked to. If not provided, the default label "" is used. It can also be set to the empty string "" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.
 2. "address_type"   (string, optional) The address type to use. Options are "legacy", "p2sh-segwit", and "bech32". Default is set by -addresstype.
 
 Result:
@@ -3275,26 +3868,40 @@
 
 
 ---
-name: getaccount
+name: loadwallet
 btcversion: 0.17.0
 btcgroup: wallet
-permalink: en/doc/0.17.0/rpc/wallet/getaccount/
+permalink: en/doc/0.17.0/rpc/wallet/loadwallet/
 ---
 
-getaccount "address"
+loadwallet "filename"
 
-DEPRECATED. Returns the account associated with the given address.
+Loads a wallet from a wallet file or directory.
+Note that all wallet command-line options used when starting bitcoind will be
+applied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).
 
 Arguments:
-1. "address"         (string, required) The bitcoin address for account lookup.
+1. "filename"    (string, required) The wallet directory or .dat file.
 
 Result:
-"accountname"        (string) the account address
+{
+  "name" :    <wallet_name>,        (string) The wallet name if loaded successfully.
+  "warning" : <warning>,            (string) Warning message if wallet was not loaded cleanly.
+}
 
 Examples:
-> bitcoin-cli getaccount "1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX"
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccount", "params": ["1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+> bitcoin-cli loadwallet "test.dat"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "loadwallet", "params": ["test.dat"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
+name: getaccount
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/getaccount/
+---
 
+getaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
 ---
 name: keypoolrefill
@@ -3348,30 +3955,35 @@
 permalink: en/doc/0.17.0/rpc/wallet/move/
 ---
 
-move "fromaccount" "toaccount" amount ( minconf "comment" )
-
-DEPRECATED. Move a specified amount from one account in your wallet to another.
+move (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)
 
-Arguments:
-1. "fromaccount"   (string, required) The name of the account to move funds from. May be the default account using "".
-2. "toaccount"     (string, required) The name of the account to move funds to. May be the default account using "".
-3. amount            (numeric) Quantity of BTC to move between accounts.
-4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.
-5. "comment"       (string, optional) An optional comment, stored in the wallet only.
+---
+name: sethdseed
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/sethdseed/
+---
 
-Result:
-true|false           (boolean) true if successful.
+sethdseed ( "newkeypool" "seed" )
 
-Examples:
+Set or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already
+HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.
 
-Move 0.01 BTC from the default account to the account named tabby
-> bitcoin-cli move "" "tabby" 0.01
+Note that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.
 
-Move 0.01 BTC timotei to akiko with a comment and funds have 6 confirmations
-> bitcoin-cli move "timotei" "akiko" 0.01 6 "happy birthday!"
+Arguments:
+1. "newkeypool"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.
+                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.
+                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing
+                             keypool will be used until it has been depleted.
+2. "seed"               (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.
+                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1
 
-As a json rpc call
-> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "move", "params": ["timotei", "akiko", 0.01, 6, "happy birthday!"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+Examples:
+> bitcoin-cli sethdseed 
+> bitcoin-cli sethdseed false
+> bitcoin-cli sethdseed true "wifkey"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sethdseed", "params": [true, "wifkey"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
 
 
 ---
@@ -3405,7 +4017,7 @@
                                                    may be unknown for unconfirmed transactions not in the mempool
   "details" : [
     {
-      "account" : "accountname",      (string) DEPRECATED. The account name involved in the transaction, can be "" for the default account.
+      "account" : "accountname",      (string) DEPRECATED. This field will be removed in a V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name involved in the transaction, can be "" for the default account.
       "address" : "address",          (string) The bitcoin address involved in the transaction
       "category" : "send|receive",    (string) The category, either 'send' or 'receive'
       "amount" : x.xxx,                 (numeric) The amount in BTC
@@ -3453,13 +4065,13 @@
 permalink: en/doc/0.17.0/rpc/wallet/addmultisigaddress/
 ---
 
-addmultisigaddress nrequired ["key",...] ( "account" "address_type" )
+addmultisigaddress nrequired ["key",...] ( "label" "address_type" )
 
 Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.
 Each key is a Bitcoin address or hex-encoded public key.
 This functionality is only intended for use with non-watchonly addresses.
 See `importaddress` for watchonly p2sh address support.
-If 'account' is specified (DEPRECATED), assign address to that account.
+If 'label' is specified, assign address to that label.
 
 Arguments:
 1. nrequired                      (numeric, required) The number of required signatures out of the n keys or addresses.
@@ -3468,7 +4080,7 @@
        "address"                  (string) bitcoin address or hex-encoded public key
        ...,
      ]
-3. "account"                      (string, optional) DEPRECATED. An account to assign the addresses to.
+3. "label"                        (string, optional) A label to assign the addresses to.
 4. "address_type"                 (string, optional) The address type to use. Options are "legacy", "p2sh-segwit", and "bech32". Default is set by -addresstype.
 
 Result:
@@ -3477,10 +4089,6 @@
   "redeemScript":"script"         (string) The string value of the hex-encoded redemption script.
 }
 
-Result (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).
-        clients should transition to the new output api before upgrading to v0.17.
-"address"                         (string) A bitcoin address associated with the keys.
-
 Examples:
 
 Add a multisig address from 2 addresses
@@ -3491,6 +4099,32 @@
 
 
 ---
+name: getaddressesbylabel
+btcversion: 0.17.0
+btcgroup: wallet
+permalink: en/doc/0.17.0/rpc/wallet/getaddressesbylabel/
+---
+
+getaddressesbylabel "label"
+
+Returns the list of addresses assigned the specified label.
+
+Arguments:
+1. "label"  (string, required) The label.
+
+Result:
+{ (json object with addresses as keys)
+  "address": { (json object with information about address)
+    "purpose": "string" (string)  Purpose of address ("send" for sending address, "receive" for receiving address)
+  },...
+}
+
+Examples:
+> bitcoin-cli getaddressesbylabel "tabby"
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaddressesbylabel", "params": ["tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
+---
 name: lockunspent
 btcversion: 0.17.0
 btcgroup: wallet
@@ -3662,3 +4296,28 @@
 > curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "logging", "params": [["all"], "[libevent]"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
 
 
+---
+name: getzmqnotifications
+btcversion: 0.17.0
+btcgroup: zmq
+permalink: en/doc/0.17.0/rpc/zmq/getzmqnotifications/
+---
+
+getzmqnotifications
+
+Returns information about the active ZeroMQ notifications.
+
+Result:
+[
+  {                        (json object)
+    "type": "pubhashtx",   (string) Type of notification
+    "address": "..."       (string) Address of the publisher
+  },
+  ...
+]
+
+Examples:
+> bitcoin-cli getzmqnotifications 
+> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getzmqnotifications", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
+
+
